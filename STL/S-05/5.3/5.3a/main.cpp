#include <set>
#include <iostream>
#include <algorithm>
#include <functional>
#include <iterator>
using namespace std;

/**
 * A set is a collection of ordered data in a balanced binary tree
 * structure.
 *
 * template <typename Key,
 *           typename Compare = less<Key>,
 *           typename Allocator = allocator <Key> >
 * class set { ... };
 * 
 * Characteristics of set
 * . It orders the elements that are added to it.
 * . A set contains only one copy of any element (key) added to it.
 *
 * Elements are generated by set iterators in sequence, ordered by the
 * comparison operator provided when the set was declared (e.g.,
 * less<> or greater<>). If there was no comparison function used when
 * the set or multiset was declared, C++ uses the < operator if it is
 * defined. This works for all primitive data type elements in a set,
 * but if one use a set for holding a user defined class, one need to
 * have a function that compares values passed to the set when it is
 * declared.
 */
int main() {
  // Arrange the set in descending order.
  set<int, greater<>> setof_nums({1, 2, 3});
  auto index = setof_nums.find (9);

  if (index == setof_nums.end())
    cout << "9 not found\n";
  else
    cout << "9 found\n";

  setof_nums.insert(9);

  cout << setof_nums.size() << " elements in the set" << endl;

  index = find(setof_nums.begin(), setof_nums.end(), 9);

  if (index == setof_nums.end())
    cout << "9 not found in the set\n"  << endl;
  else
    cout << "9 found it! \n" << endl;

  // Print contents of the set in descending order.
  copy (setof_nums.begin (),
        setof_nums.end (),
        ostream_iterator<int> (cout, "\n"));

  return 0;
}

