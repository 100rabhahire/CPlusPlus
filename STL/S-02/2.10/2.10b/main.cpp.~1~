#include <iostream>
#include <vector>
#include <deque>
#include <list>

using namespace std;

struct Blob {
public:
  template<typename... Args>
  explicit Blob(Args&&... args)
    : v_(std::forward<Args>(args)...) {
  }

  std::vector<std::string> v_;
};

ostream& operator <<(std::ostream& os, Blob blob) {
  os << __PRETTY_FUNCTION__ << '\n';

  for (const auto &e : blob.v_)
    os << e << ' ';

  return os;
}

int main() {
  const char *shapes[3] = { "Circle", "Triangle", "Square" };

  Blob b1(3, "words");
  Blob b2(shapes, shapes + 3);

  cout << b1 << endl;
  cout << b2 << endl;
  return 0;
}
